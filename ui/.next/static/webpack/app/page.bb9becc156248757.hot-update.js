"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/demos/agent/realOrchestrator.ts":
/*!*********************************************!*\
  !*** ./src/demos/agent/realOrchestrator.ts ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealOrchestrator: function() { return /* binding */ RealOrchestrator; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ RealOrchestrator auto */ // Connect via API proxy to avoid CORS issues\nconst PROXY_BASE = \"/api/gateway/proxy\";\nclass RealOrchestrator {\n    generateTraceId() {\n        // Generate trace ID in Orca's expected format: txn_[16 hex chars]\n        const hex = Math.random().toString(16).substring(2, 18).padEnd(16, \"0\");\n        return \"txn_\".concat(hex);\n    }\n    async makeRequest(url) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-ocn-trace-id\": this.traceId,\n                    ...options.headers\n                },\n                ...options\n            });\n            if (!response.ok) {\n                return {\n                    success: false,\n                    error: \"HTTP \".concat(response.status, \": \").concat(response.statusText)\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    }\n    async makeMCPRequest(agent, verb) {\n        let args = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const mcpRequest = {\n            verb,\n            args\n        };\n        return this.makeRequest(\"\".concat(PROXY_BASE, \"/\").concat(agent, \"/mcp/invoke\"), {\n            method: \"POST\",\n            body: JSON.stringify(mcpRequest)\n        });\n    }\n    getOxfordsCart() {\n        return {\n            items: [\n                {\n                    sku: \"OXFORD-SLIM-CREW-M\",\n                    name: \"Slim-Fit Crew Oxford (M)\",\n                    unit_price: 120.0,\n                    qty: 2,\n                    category: \"clothing\"\n                },\n                {\n                    sku: \"BLAZER-NAVY-40R\",\n                    name: \"Navy Blazer\",\n                    unit_price: 140.0,\n                    qty: 1,\n                    category: \"clothing\"\n                }\n            ],\n            total: 380.0\n        };\n    }\n    async runAgentFlow(choice) {\n        const selectedChoice = choice || \"credit\";\n        const explanations = [];\n        const cart = this.getOxfordsCart();\n        const cartTotal = cart.total;\n        this.traceId = this.generateTraceId(); // Generate a new trace ID for each flow run\n        this.baseTimestamp = Date.now();\n        // Follow the 11-step event sequence from the image, using real agents when possible\n        // 1. Orca (Checkout decision)\n        let orcaResponse;\n        try {\n            orcaResponse = await this.makeRequest(\"\".concat(PROXY_BASE, \"/orca/decision\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    cart_total: cartTotal,\n                    currency: \"USD\"\n                })\n            });\n            console.log(\"\\uD83D\\uDE80 REAL AGENT: Orca decision response:\", orcaResponse.success ? \"SUCCESS\" : \"FAILED\");\n        } catch (error) {\n            console.warn(\"\\uD83D\\uDE80 REAL AGENT: Orca decision failed, using fallback:\", error);\n            orcaResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"orca_checkout_001\",\n            agent: \"orca\",\n            model_version: \"orca_decision_ml_v4.1.8\",\n            policy_version: \"checkout_v1.0.0\",\n            summary: \"Checkout initiated for $\".concat(cartTotal, \" transaction. Analyzing payment options and risk factors...\"),\n            decision: \"pending\",\n            score: 0.5,\n            score_type: \"risk\",\n            uncertainty: 0.1,\n            key_signals: [\n                {\n                    path: \"cart.total\",\n                    value: cartTotal,\n                    weight: 0.5\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 1000).toISOString(),\n            extra: {\n                status: \"initiated\",\n                real_data: orcaResponse.success\n            }\n        });\n        // 2. Opal (Wallet method selected)\n        const opalMethod = selectedChoice === \"credit\" ? \"credit_card\" : \"bnpl\";\n        let opalResponse;\n        try {\n            opalResponse = await this.makeRequest(\"\".concat(AGENT_URLS.opal, \"/wallet/methods?actor_id=demo_actor\"));\n            console.log(\"\\uD83D\\uDE80 REAL AGENT: Opal wallet methods response:\", opalResponse.success ? \"SUCCESS\" : \"FAILED\");\n        } catch (error) {\n            console.warn(\"\\uD83D\\uDE80 REAL AGENT: Opal wallet methods failed, using fallback:\", error);\n            opalResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"opal_wallet_002\",\n            agent: \"opal\",\n            model_version: \"opal_wallet_ml_v3.0.1\",\n            policy_version: \"wallet_v1.8.2\",\n            summary: \"\".concat(selectedChoice === \"credit\" ? \"Credit card\" : \"BNPL\", \" selected as payment method. Card ending in ****1234 has sufficient credit limit...\"),\n            decision: \"allow\",\n            score: 0.9,\n            score_type: \"suitability\",\n            uncertainty: 0.05,\n            key_signals: [\n                {\n                    path: \"payment.method\",\n                    value: opalMethod,\n                    weight: 0.8\n                }\n            ],\n            ap2_refs: [],\n            redactions: [\n                \"card_number\"\n            ],\n            timestamp: new Date(this.baseTimestamp + 2000).toISOString(),\n            extra: {\n                method: opalMethod,\n                real_data: opalResponse.success\n            }\n        });\n        // 3. Olive (Loyalty incentives applied)\n        const cashbackAmount = selectedChoice === \"credit\" ? (cartTotal * 0.05).toFixed(2) : \"0.00\";\n        let oliveResponse;\n        try {\n            oliveResponse = await this.makeMCPRequest(\"olive\", \"getIncentives\", {\n                amount: cartTotal,\n                payment_method: selectedChoice,\n                customer_tier: \"gold\"\n            });\n            console.log(\"\\uD83D\\uDE80 REAL AGENT: Olive incentives response:\", oliveResponse.success ? \"SUCCESS\" : \"FAILED\");\n        } catch (error) {\n            console.warn(\"\\uD83D\\uDE80 REAL AGENT: Olive incentives failed, using fallback:\", error);\n            oliveResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"olive_loyalty_003\",\n            agent: \"olive\",\n            model_version: \"olive_loyalty_ml_v1.9.3\",\n            policy_version: \"loyalty_v2.4.1\",\n            summary: selectedChoice === \"credit\" ? \"Excellent! Credit card selected. You'll earn 5% cash back = $\".concat(cashbackAmount, \". Gold tier benefits apply...\") : \"BNPL selected. No loyalty incentives apply for this payment method.\",\n            decision: \"allow\",\n            score: selectedChoice === \"credit\" ? 0.95 : 0.7,\n            score_type: \"value\",\n            uncertainty: 0.02,\n            key_signals: [\n                {\n                    path: \"loyalty.tier\",\n                    value: \"gold\",\n                    weight: 0.7\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 3000).toISOString(),\n            extra: {\n                cashback: cashbackAmount,\n                real_data: oliveResponse.success\n            }\n        });\n        // 4. Okra (BNPL quote generated)\n        const bnplPayment = Math.round(cartTotal / 4);\n        let okraResponse;\n        try {\n            okraResponse = await this.makeRequest(\"\".concat(AGENT_URLS.okra, \"/bnpl/quote\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    amount: cartTotal,\n                    tenor: 4,\n                    on_time_rate: 0.95,\n                    utilization: 0.31\n                })\n            });\n        } catch (error) {\n            console.warn(\"Okra BNPL quote failed, using fallback:\", error);\n            okraResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"okra_bnpl_004\",\n            agent: \"okra\",\n            model_version: \"okra_bnpl_ml_v1.0.0\",\n            policy_version: \"bnpl_v1.0.0\",\n            summary: \"BNPL quote generated: 4 payments of $\".concat(bnplPayment, \" each, 0% interest, no fees...\"),\n            decision: \"propose_alt\",\n            score: 0.85,\n            score_type: \"affordability\",\n            uncertainty: 0.08,\n            key_signals: [\n                {\n                    path: \"bnpl.installments\",\n                    value: 4,\n                    weight: 0.6\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 4000).toISOString(),\n            extra: {\n                installments: 4,\n                amount_per_payment: bnplPayment,\n                real_data: okraResponse.success\n            }\n        });\n        // 5. Onyx (KYB verification CE emitted)\n        let onyxResponse;\n        try {\n            onyxResponse = await this.makeMCPRequest(\"onyx\", \"getTrustSignal\", {\n                trace_id: this.traceId,\n                context: {\n                    device_reputation: 0.8,\n                    velocity: 1.5,\n                    ip_risk: 0.2,\n                    history_len: 25\n                }\n            });\n        } catch (error) {\n            console.warn(\"Onyx KYB verification failed, using fallback:\", error);\n            onyxResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"onyx_kyb_005\",\n            agent: \"onyx\",\n            model_version: \"onyx_kyb_ml_v2.0.0\",\n            policy_version: \"kyb_v1.1.0\",\n            summary: \"KYB verification completed. Customer identity verified through multiple data sources...\",\n            decision: \"allow\",\n            score: 0.98,\n            score_type: \"trust\",\n            uncertainty: 0.01,\n            key_signals: [\n                {\n                    path: \"kyb.status\",\n                    value: \"verified\",\n                    weight: 0.9\n                }\n            ],\n            ap2_refs: [],\n            redactions: [\n                \"customer_id_full\"\n            ],\n            timestamp: new Date(this.baseTimestamp + 5000).toISOString(),\n            extra: {\n                kyb_status: \"verified\",\n                real_data: onyxResponse.success\n            }\n        });\n        // 6. Orca vs Opal (Negotiation + LLM explanations)\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"orca_opal_negotiation_006\",\n            agent: \"orca\",\n            model_version: \"orca_negotiation_llm_v1.0.0\",\n            policy_version: \"negotiation_v1.0.0\",\n            summary: \"Negotiation with Opal complete. Optimized payment terms agreed: \".concat(selectedChoice === \"credit\" ? \"Credit card with 5% cashback ($\".concat(cashbackAmount, \")\") : \"BNPL (4x$\".concat(bnplPayment, \")\"), \".\"),\n            decision: \"allow\",\n            score: 0.92,\n            score_type: \"optimization\",\n            uncertainty: 0.07,\n            key_signals: [\n                {\n                    path: \"negotiation.outcome\",\n                    value: \"optimized\",\n                    weight: 0.8\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 6000).toISOString(),\n            extra: {\n                negotiated_terms: selectedChoice,\n                real_data: orcaResponse.success\n            }\n        });\n        // 7. Weave (Processor auction)\n        let weaveResponse;\n        try {\n            weaveResponse = await this.makeRequest(\"\".concat(AGENT_URLS.weave, \"/auction/run\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    amount: cartTotal,\n                    currency: \"USD\",\n                    payment_method: selectedChoice\n                })\n            });\n        } catch (error) {\n            console.warn(\"Weave auction failed, using fallback:\", error);\n            weaveResponse = {\n                success: false\n            };\n        }\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"weave_auction_007\",\n            agent: \"weave\",\n            model_version: \"weave_auction_ml_v2.3.4\",\n            policy_version: \"auction_v4.1.2\",\n            summary: \"Processor auction complete! 3 processors bid for transaction. Winning bid: 1.5% + $2.50 processing cost...\",\n            decision: \"allow\",\n            score: 0.88,\n            score_type: \"cost\",\n            uncertainty: 0.06,\n            key_signals: [\n                {\n                    path: \"auction.winner\",\n                    value: \"ProcessorX\",\n                    weight: 0.7\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 7000).toISOString(),\n            extra: {\n                winning_processor: \"ProcessorX\",\n                cost_bps: 150,\n                real_data: weaveResponse.success\n            }\n        });\n        // 8. Final (Settlement path)\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"final_settlement_008\",\n            agent: \"orca\",\n            model_version: \"orca_settlement_ml_v1.0.0\",\n            policy_version: \"settlement_v1.0.0\",\n            summary: \"Settlement path determined: Standard 2-day settlement to merchant account...\",\n            decision: \"allow\",\n            score: 0.99,\n            score_type: \"efficiency\",\n            uncertainty: 0.01,\n            key_signals: [\n                {\n                    path: \"settlement.days\",\n                    value: 2,\n                    weight: 0.9\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 8000).toISOString(),\n            extra: {\n                settlement_days: 2\n            }\n        });\n        // 9. Orca/Opal/Olive (Payment instruction compiled)\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"payment_instruction_009\",\n            agent: \"opal\",\n            model_version: \"opal_instruction_ml_v1.0.0\",\n            policy_version: \"instruction_v1.0.0\",\n            summary: \"Payment instruction compiled successfully. All agent inputs integrated...\",\n            decision: \"allow\",\n            score: 0.97,\n            score_type: \"completeness\",\n            uncertainty: 0.03,\n            key_signals: [\n                {\n                    path: \"instruction.status\",\n                    value: \"compiled\",\n                    weight: 0.85\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 9000).toISOString(),\n            extra: {\n                instruction_id: \"INST-789012\"\n            }\n        });\n        // 10. Weave (Instruction signed & forwarded)\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"weave_signed_010\",\n            agent: \"weave\",\n            model_version: \"weave_security_ml_v1.0.0\",\n            policy_version: \"security_v1.0.0\",\n            summary: \"Payment instruction signed with cryptographic signature and forwarded to processor...\",\n            decision: \"allow\",\n            score: 0.99,\n            score_type: \"security\",\n            uncertainty: 0.01,\n            key_signals: [\n                {\n                    path: \"signature.status\",\n                    value: \"valid\",\n                    weight: 0.95\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 10000).toISOString(),\n            extra: {\n                signature_type: \"ECDSA\"\n            }\n        });\n        // 11. Processor (Authorization result)\n        explanations.push({\n            trace_id: this.traceId,\n            step_id: \"processor_auth_011\",\n            agent: \"orca\",\n            model_version: \"orca_auth_ml_v1.0.0\",\n            policy_version: \"auth_v1.0.0\",\n            summary: \"Authorization successful! Transaction approved by processor. $\".concat(cartTotal, \" charged to \").concat(selectedChoice === \"credit\" ? \"credit card\" : \"BNPL account\", \"...\"),\n            decision: \"allow\",\n            score: 1.0,\n            score_type: \"final\",\n            uncertainty: 0.0,\n            key_signals: [\n                {\n                    path: \"auth.status\",\n                    value: \"approved\",\n                    weight: 1.0\n                }\n            ],\n            ap2_refs: [],\n            redactions: [],\n            timestamp: new Date(this.baseTimestamp + 11000).toISOString(),\n            extra: {\n                auth_code: \"ABC123XYZ\",\n                final_status: \"approved\"\n            }\n        });\n        return explanations;\n    }\n    constructor(){\n        this.traceId = this.generateTraceId();\n        this.baseTimestamp = Date.now();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/demos/agent/realOrchestrator.ts\n"));

/***/ })

});